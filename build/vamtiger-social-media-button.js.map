{"version":3,"file":"vamtiger-social-media-button.js","sources":["../source/types.ts","../source/config.ts","../source/css/document-index.ts","../source/html/index.ts","../source/get-template.ts","../source/handle-color-changed.ts","../source/handle-attribute-changed.ts","../source/load-icon.ts","../source/element.ts","../source/vamtiger-social-media-button.ts"],"sourcesContent":["import * as VBM from 'vamtiger-browser-method/build/types';\nimport VamtigerSocialMediaButton from './element';\n\nexport enum StringConstant {\n    nothing = '',\n    newline = '\\n',\n    comma = ','\n}\n\nexport enum EventName {\n    buttonLoaded = 'buttonLoaded'\n}\n\nexport enum Selector {\n    style = 'style',\n    slot = 'slot',\n    figure = 'figure',\n    figcaption = 'figcaption',\n    facebookIcon = 'vamtiger-social-media-icon[data-facebook]',\n    twitterIcon = 'vamtiger-social-media-icon[data-twitter]',\n    instagramIcon = 'vamtiger-social-media-icon[data-instagram]',\n    facebookSvg = 'svg[data-facebook-svg]',\n    twitterSvg = 'svg[data-twitter-svg]',\n    instagramSvg = 'svg[data-instagram-svg]',\n    facebookSvgPath = 'svg[data-facebook-svg] > path',\n    twitterSvgPath = 'svg[data-twitter-svg] > path',\n    instagramSvgPath = 'svg[data-instagram-svg] > path'\n}\n\nexport enum ObservedAttributes {\n    'data-color' = 'data-color'\n}\n\nexport enum SocialMediaIcon {\n    facebook = 'facebook',\n    twitter = 'twitter',\n    instagram = 'instagram'\n}\n\nexport interface IGetTemplate {\n    selector: Selector;\n    attributes?: IAttributes;\n    properties?: IProperties;\n}\n\nexport interface IAttributes {\n    id?: string;\n    for?: string;\n    name?: string;\n    slot?: string;\n    color?: string;\n}\n\nexport interface IProperties {\n    innerHTML?: string;\n}\n\nexport interface IDataset extends DOMStringMap {\n    twitter: SocialMediaIcon;\n    color?: string;\n    loaded?: string;\n}\n\nexport interface IHandleAttributeChanged {\n    name: ObservedAttribute,\n    oldValue: string;\n    newValue: string;\n    element: VamtigerSocialMediaButton;\n}\n\nexport interface ILoadIcon {\n    element: VamtigerSocialMediaButton\n}\n\nexport type AttributesKey = keyof IAttributes;\n\nexport type ObservedAttribute = keyof typeof ObservedAttributes;\n\nexport type HandleAttributeChanged = {\n    [K in ObservedAttribute]: (params: IHandleAttributeChanged) => void;\n}\n\nexport type GetTemplate<P extends IGetTemplate> =\n    P['selector'] extends Selector.style ? HTMLStyleElement :\n    P['selector'] extends Selector.slot ? HTMLSlotElement :\n    P['selector'] extends\n        Selector.figure\n        | Selector.figcaption\n        | Selector.twitterIcon\n        | Selector.facebookIcon\n        | Selector.instagramIcon\n            ? HTMLElement :\n    P['selector'] extends\n        Selector.facebookSvg\n        | Selector.twitterSvg\n        | Selector.instagramSvg\n            ? SVGElement :\n    null;","import {\n    ObservedAttributes,\n    ObservedAttribute\n} from './types'\n\nexport const shadowRoot = {\n    mode: 'open'\n} as ShadowRootInit;\n\nexport const observedAttributes = Object.keys(ObservedAttributes) as ObservedAttribute[];\n\nexport const dependencies = [\n    'https://unpkg.com/vamtiger-social-media-icon@latest'\n];","export default `vamtiger-social-media-button vamtiger-social-media-icon{width:100%;height:100%}vamtiger-social-media-button[data-loaded]{opacity:1;-webkit-box-shadow:2px 2px 1px rgba(0,0,0,.2);box-shadow:2px 2px 1px rgba(0,0,0,.2)}\n/*# sourceMappingURL=document-index.ts.map */`;","export default `<style></style> <slot></slot> <figure></figure> <figcaption></figcaption> <vamtiger-social-media-icon data-twitter></vamtiger-social-media-icon> <vamtiger-social-media-icon data-facebook></vamtiger-social-media-icon> <vamtiger-social-media-icon data-instagram></vamtiger-social-media-icon>`;","import {\n    IGetTemplate,\n    GetTemplate,\n    StringConstant,\n    AttributesKey\n} from './types';\nimport html from './html';\nimport css from './css';\n\nconst { nothing } = StringConstant;\nconst template = document.createElement('template');\nconst stylesheet = `<style>${css}</style>`\nconst templateHtml = [\n    stylesheet,\n    html\n].join(nothing);\n\ntemplate.innerHTML = templateHtml;\n\nexport default <P extends IGetTemplate>(params: P) => {\n    const {\n        selector,\n        attributes = {},\n        properties = {}\n    } = params;\n    const attributesKeys = Object.keys(attributes) as AttributesKey[]\n    const templateElement = template.content.querySelector(selector);\n    const currentTemplate = templateElement && templateElement.cloneNode(true) as GetTemplate<P>;\n\n    if (currentTemplate) {\n        Object.assign(currentTemplate, properties);\n\n        attributesKeys.forEach(key => attributes[key] && currentTemplate.setAttribute(key, attributes[key] || ''));\n    }\n\n    return currentTemplate;\n};","import {\n    IHandleAttributeChanged,\n    Selector,\n    StringConstant\n} from './types';\n\nconst selector = [\n    Selector.facebookSvgPath,\n    Selector.twitterSvgPath\n].join(StringConstant.comma);\n\nexport default function ({ element, newValue: fill}: IHandleAttributeChanged) {\n    const { shadowRoot } = element;\n    const path = shadowRoot && shadowRoot.querySelector<SVGPathElement>(selector);\n\n    if (path && fill) {\n        path.style.fill = fill;\n    }\n}","import {\n    HandleAttributeChanged\n} from './types';\nimport handleColorChanged from './handle-color-changed';\n\nexport default {\n    'data-color': handleColorChanged\n} as HandleAttributeChanged;","import {\n    ILoadIcon,\n    IDataset,\n    SocialMediaIcon,\n    Selector,\n    EventName,\n    StringConstant\n} from './types';\nimport getTemplate from './get-template';\nimport { name as slotName } from './element';\n\nconst { nothing } = StringConstant;\nconst eventParams = {\n    bubbles: true\n};\nconst buttonLoadedEvent = new CustomEvent(\n    EventName.buttonLoaded,\n    eventParams\n);\n\nexport default async function ({ element }: ILoadIcon) {\n    const dataset = element.dataset as IDataset;\n    const {\n        color\n    } = dataset;\n    const socialMediaIconSelector = dataset.hasOwnProperty(SocialMediaIcon.twitter) && Selector.twitterIcon\n        || dataset.hasOwnProperty(SocialMediaIcon.facebook) && Selector.facebookIcon\n        || dataset.hasOwnProperty(SocialMediaIcon.instagram) && Selector.instagramIcon;\n    const socialMediaIcon = socialMediaIconSelector && getTemplate({\n        selector: socialMediaIconSelector,\n        attributes: {\n            slot: slotName\n        }\n    });\n\n    if (socialMediaIcon) {\n        socialMediaIcon.addEventListener('iconLoaded', handleIconLoaded);\n\n        if (color) {\n            socialMediaIcon.dataset.color = color;\n        }\n    }\n\n    socialMediaIcon && element.appendChild(socialMediaIcon);\n\n    function handleIconLoaded() {\n        if (socialMediaIcon) {\n            socialMediaIcon.removeEventListener('iconLoaded', handleIconLoaded);\n\n            dataset.loaded = nothing;\n\n            element.dispatchEvent(buttonLoadedEvent);\n        }\n    }\n}","import {\n    Selector,\n    ObservedAttribute,\n    StringConstant\n} from './types';\nimport {\n    shadowRoot as shadowRootConfig,\n    observedAttributes\n} from './config';\nimport css from './css/document-index';\nimport getTemplate from './get-template';\nimport handleAttributeChange from './handle-attribute-changed';\nimport loadIcon from './load-icon';\n\nconst { VamtigerBrowserMethod } = window;\nconst { loadScript } = VamtigerBrowserMethod;\nexport const name = 'vamtiger-social-media-button';\nconst {\n    newline\n} = StringConstant;\n\ncss && loadScript({ name, css })\n    .catch(console.error);\n\nexport default class VamtigerSocialMediaButton extends HTMLElement {\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow(shadowRootConfig);\n        const stylesheet = getTemplate({\n            selector: Selector.style\n        });\n        const slot = getTemplate({\n            selector: Selector.slot,\n            attributes: {\n                name\n            }\n        });\n        const elements = [\n            stylesheet,\n            slot\n        ];\n\n        elements.forEach(element => element && shadowRoot.appendChild(element));\n    }\n\n    static get observedAttributes() {\n        return observedAttributes;\n    }\n\n    async connectedCallback() {\n        const element = this;\n\n        await loadIcon({ element });\n    }\n\n    attributeChangedCallback(name: ObservedAttribute, oldValue: string, newValue: string) {\n        const element = this;\n\n        handleAttributeChange[name]({\n            name,\n            oldValue,\n            newValue,\n            element\n        });\n    }\n}","import constructor, { name } from './element';\nimport {\n    dependencies\n} from './config'\n\nconst { VamtigerBrowserMethod } = window;\nconst { defineCustomElement, loadScript } = VamtigerBrowserMethod;\nconst params = {\n    name,\n    constructor\n};\n\nasync function load() {\n    await Promise.all(dependencies.map(src => loadScript({ src })));\n\n    defineCustomElement(params);\n}\n\nload().catch(console.warn);"],"names":["StringConstant","EventName","Selector","ObservedAttributes","SocialMediaIcon","shadowRoot","mode","observedAttributes","Object","keys","dependencies","nothing","template","document","createElement","templateHtml","html","join","innerHTML","params","selector","attributes","properties","attributesKeys","templateElement","content","querySelector","currentTemplate","cloneNode","assign","forEach","key","setAttribute","facebookSvgPath","twitterSvgPath","comma","data-color","element","newValue","fill","path","style","buttonLoadedEvent","CustomEvent","buttonLoaded","bubbles","VamtigerBrowserMethod","window","loadScript","name","css","catch","console","error","defineCustomElement","HTMLElement","[object Object]","super","this","attachShadow","shadowRootConfig","getTemplate","slot","appendChild","dataset","color","socialMediaIconSelector","hasOwnProperty","twitter","twitterIcon","facebook","facebookIcon","instagram","instagramIcon","socialMediaIcon","slotName","addEventListener","handleIconLoaded","removeEventListener","loaded","dispatchEvent","loadIcon","oldValue","handleAttributeChange","Promise","all","map","src","load","warn"],"mappings":"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"}